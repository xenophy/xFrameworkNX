File I/O は POSIX 標準の関数に対する単純なラッパーとして提供されます。

このクラスは、ビルトインモジュールのFile Systemを継承したクラスになります。

全てのメソッドは非同期と同期の形式があります。

非同期の形式は常に最後の引数として完了コールバックを受け取ります。

引数として渡される完了コールバックはメソッドに依存しますが、最初の引数は常に例外のために予約されています。

操作が成功で完了すると最初の引数はnullまたはundefinedとなります。


<br />
非同期バージョンの例です:

    NX.fs.unlink('/tmp/hello', function (err) {
        if (err) throw err;
        console.log('successfully deleted /tmp/hello');
    });


同期バージョンです:

    NX.fs.unlinkSync('/tmp/hello');
    console.log('successfully deleted /tmp/hello');


非同期メソッドでは順序の保証はありません。
以下のような傾向のエラーがあります。

    NX.fs.rename('/tmp/hello', '/tmp/world', function (err) {
        if (err) throw err;
        console.log('renamed complete');
    });

    NX.fs.stat('/tmp/world', function (err, stats) {
        if (err) throw err;
        console.log('stats: ' + JSON.stringify(stats));
    });

statはrenameより先に実行される可能性があります。
正しい方法はコールバックをチェーンすることです。

    NX.fs.rename('/tmp/hello', '/tmp/world', function (err) {
        if (err) throw err;
        NX.fs.stat('/tmp/world', function (err, stats) {
            if (err) throw err;
            console.log('stats: ' + JSON.stringify(stats));
        });
    });

忙しいプロセスでは、プログラマはこれらの非同期バージョンを使うことが強く推奨されます。

同期バージョンはそれが完了するまでプロセス全体をブロック(全ての接続を停止します)します。


